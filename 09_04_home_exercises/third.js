// // Задача №3.

// // Следующий код создаёт массив из стрелков (shooters).

// // Каждая функция предназначена выводить их порядковые номера. Но что-то пошло не так…

// // function makeArmy() {
// //    let shooters = [];
  
// //    let i = 0;
// //    while (i < 10) {
// //      let shooter = function() { // функция shooter
// //        alert( i ); // должна выводить порядковый номер
// //      };
// //      shooters.push(shooter);
// //      i++;
// //    }
  
// //    return shooters;
// //  }
  
// //  let army = makeArmy();
  
// //  army[0](); // у 0-го стрелка будет номер 10
// //  army[5](); // и у 5-го стрелка тоже будет номер 10
// //  ... у всех стрелков будет номер 10, вместо 0, 1, 2, 3...


function makeArmy() {

// Увидев в примере выше let i = 0, цикл while с условием (i < 10) и i++, я сразу подумал о переделке в цикл for, чтобы было красивее.
// Код практически идентичный с тем, что был в условии задачи, но после того, как я поменял с while на for, и увидел, что
// всё заработало как надо, я предположил, что всё дело в переменной i, которая была объявлена до вызова цикла.
// Уже после этого зашёл в решение задачи и прочитав большое объясниние того, что здесь происходит, понял, что предположение верное. 
// Плюс был ещё один способ решения задачи, чтобы лучше понять, как работает лексическое окружение:
// можно было внутри цикла while объявить новую переменную, равную i (к примеру, let j = i) - тогда бы тоже заработало

    let shooters = [];
    for (let i = 0; i < 10; i += 1) {
        let shooter = () => console.log(i);
        shooters.push(shooter);
    };
    return shooters;
};
 
let army = makeArmy();

console.log(army[6]());